module kernel
    contains
    ! CUDA kernel. Each thread takes care of one element of c
    attributes(global) subroutine vecAdd_kernel(n, a, b, c)
        integer, value :: n
        integer :: id_x, id_y, id_z
		real(8), device :: a(n,n,n), b(n,n,n), c(n,n,n)
		
		! Get our global thread ID
        id_x = (blockidx%x-1)*blockdim%x + threadidx%x
		id_y = (blockidx%y-1)*blockdim%y + threadidx%y
		id_z = (blockidx%z-1)*blockdim%z + threadidx%z
		
		if (id_x <= n .and. id_y <= n .and. id_z <= n) then
			c(id_x,id_y,id_z) = a(id_x,id_y,id_z)+b(id_x,id_y,id_z)
        end if

    end subroutine vecAdd_kernel
	
	
	attributes(global) subroutine vecAdd_kernel_shared(n, a, b, c)
        integer, value :: n
        integer :: id_x, id_y, id_z
		real(8), device :: a(n*n*n), b(n*n*n), c(n*n*n)
		real(8), shared ,dimension(*):: s_a
		
		! Get our global thread ID
        id_x = (blockidx%x-1)*blockdim%x + threadidx%x
		!id_y = (blockidx%y-1)*blockdim%y + threadidx%y
		!id_z = (blockidx%z-1)*blockdim%z + threadidx%z
		
		!s_a(id_x,id_y,id_z) = a(id_x,id_y,id_z)
		s_a(id_x) = a(id_x)
		!print*, "id_x = ", id_x, "id_y = ", id_y, "id_z = ", id_z
		
		!if (id_x <= n .and. id_y <= n .and. id_z <= n) then
		!	s_a(id_x,id_y,id_z) = s_a(id_x,id_y,id_z)+1.d0
        !end if
		!call syncthreads()
		!
		!if (id_x <= n .and. id_y <= n .and. id_z <= n) then
		!	c(id_x,id_y,id_z) = s_a(id_x,id_y,id_z)
		!end if
		
		if (id_x <= n ) then
			s_a(id_x) = s_a(id_x)+1.d0
        end if
		call syncthreads()
		
		if (id_x <= n ) then
			c(id_x) = s_a(id_x)
		end if
		
    end subroutine vecAdd_kernel_shared
end module kernel